[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clay Documentation",
    "section": "",
    "text": "1 Clay",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Clay Documentation",
    "section": "1.1 About",
    "text": "1.1 About\nClay is a minimalistic Clojure tool for data visualization and literate programming, compatible with the Kindly convention. It allows to conduct visual data explorations and create documents (HTML pages like this one, books, blog posts, reports, slideshows) from Clojure source code and comments.\nSource: \nArtifact: \nStatus: The project has moved into Beta stage (March 2024).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#goals",
    "href": "index.html#goals",
    "title": "Clay Documentation",
    "section": "1.2 Goals",
    "text": "1.2 Goals\n\nEasily explore & share data visualizations and notebooks for others to easily pick & use.\nEncourage writing Kindly-compatible notes for future compatiblity with other tools.\nFlow with the REPL: encourage user interactions that flow naturally with the typical use of Clojure in editors and REPLs.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Clay Documentation",
    "section": "1.3 Getting started",
    "text": "1.3 Getting started\nTry it out by starting a Clojure command line\nclj -Sdeps \"{:deps {org.scicloj/clay {:mvn/version \\\"2-beta23\\\"}}}\"\nThe :mvn/version may be changing frequently, copy the up-to-date version from .\nWait for a while, it will drop you at a prompt reading user=&gt;, now let’s require the clay namespace by typing\n(require '[scicloj.clay.v2.api :as clay])\nand then type:\n(clay/make! {:single-form '(+ 1 2 3)})\nThe terminal now looks something like below:\n$ clj -Sdeps '{:deps {org.scicloj/clay {:mvn/version \"2-beta23\"}}}'\nDownloading: org/scicloj/clay/2-beta23/clay-2-beta23.pom from clojars\nDownloading: org/scicloj/clay/2-beta23/clay-2-beta23.jar from clojars\nClojure 1.10.3\nuser=&gt; (require '[scicloj.clay.v2.api :as clay])\nnil\nuser=&gt; (clay/make! {:single-form '(+ 1 2 3)})\nserving Clay at http://localhost:1971/\n[[[[:wrote \"docs/.clay.html\"] nil]] nil [:watching-new-files #{}]]\nIt will open http://localhost:1971/ in your web browser (or use another port if 1971 is taken), and congratulations, you’ve just made your first Clay document!\nNow you can keep updating the document by trying different forms, like\n(clay/make! {:single-form '(str \"hello\" \"world\")})\nor whatever is interesting to you. Along the way, the web page will get updated automatically for you!\nAt some point, you might find that you’d better write code in a .clj file. No problem, Clay can also render a document from a Clojure file. Here, we take notebooks/demo.clj as an example. Click the link and save the file to your computer as, say, /tmp/demo.clj, then you can render this Clojure namespace (or file if you prefer) by typing the following in the REPL:\n(clay/make! {:source-path \"/tmp/demo.clj\"})\nAs your docs evolve, you may want to add more Clojure files, and manage them as a project. You can organize them as a normal Clojure project with a deps.edn, you can browse Clay’s own notebooks/ to get a sense.\nYou can also:\n\nHead over to Examples to see what features it provides and corresponding examples.\nSee the API and Configuration subsections for more options and variations.\nSee the Setup section and recent Videos for details about integrating Clay with your editor so you do not need to call make! yourself.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#projects-using-clay",
    "href": "index.html#projects-using-clay",
    "title": "Clay Documentation",
    "section": "1.4 Projects using Clay",
    "text": "1.4 Projects using Clay\n\nTablecloth documentation\nWolframite documentation\nClay documentation\nKindly-noted - documenting the ecosystem around Kindly\nNoj documentation\nTableplot documentation\nFastmath 3 documentation\nTablemath documentation\nClojisR documentation\nClojure Tidy Tuesdays data-science explorations\nClojure Data Tutorials\nClojure Data Scrapbook\nLLMs tutorial (in spanish) by Kyle Passarelli\nStatistical Computing in Clojure: Functional Approaches to Unsupervised Learning by Jaryt Salvo\nthe SciNoj Light conference",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#videos",
    "href": "index.html#videos",
    "title": "Clay Documentation",
    "section": "1.5 Videos",
    "text": "1.5 Videos\n\n\n\n\n\n\n\n\nMay 2nd 2025\nClojure for data analysis - getting started with Noj v2, VSCode, Calva, and Clay\n\n\n\n\nMar 24th 2025\nClojure visual-tools 31 - Workflow Demos 5: Clay overview\n\n\n\n\nMar 7th 2025\nNoj Reload Executable\n\n\n\n\nMar 7th 2025\nNoj in a JAR - setup-free Clojure for beginners\n\n\n\n\nJan. 24th 2025\nNoj v2 - getting started - from raw data to a blog post (demonstrating CIDER integration and Quarto publishing)\n\n\n\n\nDec. 17th 2023\nCursive integration, API, configuration - blogging demo\n\n\n\n\nDec. 17th 2023\nCIDER integration - image processing demo\n\n\n\n\nDec. 16th 2023\nCalva integration - datavis demo\n\n\n\n\nDec. 12th 2023\nDemo & Clay overview - London Clojurians - see Tim's part\n\n\n\n\nDec. 1st 2023\nKindly & Clay overview - visual-tools group - see Daniel's & Tim's parts\n\n\n\n\nJune 10th 2023\nAn early overview - babashka-conf",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Clay Documentation",
    "section": "1.6 Setup",
    "text": "1.6 Setup\nSee the example project for a concrete example.\nTo enjoy Clay’s dynamic interaction, you also need to inform it about code evaluations. This requires some editor setup.\nTo use Quarto-related actions, it is necessary to have the Quarto CLI installed in your system.\nSee the suggested setup for popular editors below. If your favourite editor is not supported yet, let us talk and make it work.\n\n1.6.1 VSCode Calva\nThere are two ways to add Clay-related commands to Calva.\n\n1.6.1.1 Calva Power Tools\nThe Calva Power Tools extension can be installed from within VSCode Install Extensions.\nIt will provide a few Clay-related commands such as Clay Make File.\nYou can find these commands and their default key bindings by searching for \"Clay\" in your VCode Command Palette.\n\n\n1.6.1.2 Calva Custom REPL Commands\nWith Clay in your classpath, Calva will discover Custom REPL Commands.\n\n\n\n\n\nname\nkey\n\n\n\n\nClay make file\nn\n\n\nClay make file Quarto\nq\n\n\nClay make file reveal.js\nr\n\n\nClay make current form\n,\n\n\nClay make top level form\n.\n\n\nClay make current form Quarto\n\n\n\nClay make top level form Quarto\n\n\n\nClay browse\nb\n\n\nClay watch\nw\n\n\n\n\n\nTo invoke a custom REPL command, press ctrl+alt+space followed by the corresponding key. Pressing ctrl+alt+space followed by space opens a quick-pick list of custom REPL commands to invoke.\nClay exports these custom command snippets via resources/calva.exports/config.edn.\nIf you prefer a different keyboard shortcut, use the command palette to find Preferences: Open Keyboard Shortcuts (JSON) and add:\n   {\n       \"key\": \"alt+x\",\n       \"command\": \"calva.runCustomREPLCommand\",\n       \"args\": \",\",\n       \"when\": \"calva:connected && calva:keybindingsEnabled\"\n   },\n   {\n       \"key\": \"shift+alt+x\",\n       \"command\": \"calva.runCustomREPLCommand\",\n       \"args\": \"n\",\n       \"when\": \"calva:connected && calva:keybindingsEnabled\"\n   },\nNow alt+x will Clay make current form as HTML, and shift+alt+x will Clay make Namespace as HTML. The “args” matches the “key” of the custom REPL commands.\n\n\n\n1.6.2 Emacs CIDER\nSee the clay.el package for the relevant interactive functions.\n\n\n1.6.3 Neovim Conjure\nSee the clay.nvim plugin.\n\n\n1.6.4 IntelliJ Cursive\nAt a Clojure project managed in Cursive, the .idea/repl-commands.xml file allows defining custom REPL commands. To enable Clay-related commands, you can copy Clay’s configuration into your .idea/repl-commands.xml file.\nYou can also copy the file to your IntelliJ configuration directory to make it global for all projects. For example, in Linux, that directory will be something like ~/.config/JetBrains/IdeaIC2025.1/options, with the appropriate version of IntelliJ Idea or IntelliJ Idea Community Edition.\nCaution: If you have some existing custom REPL commands, you will have to merge the files manually.\nYou can then add keybindings under Preferences -&gt; Keymap for the new commands.\nFor more information about commands, see the Cursive documentation on REPL commands and substitutions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#example-notebook-namespace",
    "href": "index.html#example-notebook-namespace",
    "title": "Clay Documentation",
    "section": "1.7 Example notebook namespace",
    "text": "1.7 Example notebook namespace\nThis notebook is created by a Clojure namespace. Here is the namespace definition and a few examples of what such a namespace may contain.\n\n(ns index\n  (:require\n   [scicloj.kindly.v4.api :as kindly]\n   [scicloj.kindly.v4.kind :as kind]\n   [scicloj.clay.v2.quarto.highlight-styles :as quarto.highlight-styles]\n   [scicloj.clay.v2.quarto.themes :as quarto.themes]\n   [scicloj.metamorph.ml.toydata :as toydata]\n   [scicloj.tableplot.v1.hanami :as hanami]\n   [scicloj.clay.v2.main]\n   [tablecloth.api :as tc]\n   [clojure.string :as str]))\n\nA Hiccup spec:\n\n(kind/hiccup\n [:div {:style {:background \"#efe9e6\"\n                :border-style :solid}}\n  [:ul\n   [:li \"one\"]\n   [:li \"two\"]\n   [:li \"three\"]]])\n\nonetwothree\nA dataset using Tablecloth:\n\n(-&gt; {:x (range 5)\n     :y (repeatedly 5 rand)}\n    tc/dataset\n    (tc/set-dataset-name \"my dataset\"))\n\n\nmy dataset [5 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.98437563\n\n\n1\n0.82161150\n\n\n2\n0.67339049\n\n\n3\n0.79291873\n\n\n4\n0.86466040\n\n\n\n\nA plot using Tableplot:\n\n(-&gt; (toydata/iris-ds)\n    (hanami/plot hanami/rule-chart\n                 {:=x :sepal-width\n                  :=x2 :sepal-length\n                  :=y :petal-width\n                  :=y2 :petal-length\n                  :=color :species\n                  :=color-type :nominal\n                  :=mark-size 3\n                  :=mark-opacity 0.2}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#api",
    "href": "index.html#api",
    "title": "Clay Documentation",
    "section": "1.8 API",
    "text": "1.8 API\n\n(require '[scicloj.clay.v2.api :as clay])\n\nThe entry point of the Clay API is the scicloj.clay.v2.api/make! function. Here are some usage examples.\nEvaluate and render the namespace in \"notebooks/index.clj\" as HTML and show it at the browser (opening a browser tab if this is the first time using Clay in the session):\n\n(comment\n  (clay/make! {:format [:html]\n               :source-path \"notebooks/index.clj\"}))\n\nDo the same as above by default (since :format [:html] is the default):\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as HTML and do not open a browser tab even if this is the first time using Clay in the session:\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :browse false}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as HTML and do not show it at the browser:\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :show false}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" and use the favicon at \"notebooks/favicon.ico\"\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :favicon \"notebooks/favicon.ico\"}))\n\nEvaluate and render the namespaces in \"notebooks/slides.clj\" \"notebooks/index.clj\" as HTML and do not show it at the browser:\n\n(comment\n  (clay/make! {:source-path [\"notebooks/slides.clj\"\n                             \"notebooks/index.clj\"]\n               :show false}))\n\nEvaluate and render the namespaces in \"notebooks/slides.clj\" \"notebooks/index.clj\" as HTML and start watching these files for live reload: (experimental)\n\n(comment\n  (clay/make! {:source-path [\"notebooks/slides.clj\"\n                             \"notebooks/index.clj\"]\n               :live-reload true}))\n\nEvaluate and render the namespaces in \"notebooks/slides.clj\" \"notebooks/index.clj\" as HTML and toggle the live reload option:\n\n(comment\n  (clay/make! {:source-path [\"notebooks/slides.clj\"\n                             \"notebooks/index.clj\"]\n               :live-reload :toggle}))\n\nEvaluate and render a single form in the context of the namespace in \"notebooks/index.clj\" as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :single-form '(+ 1 2)}))\n\nEvaluate and render a single form in the context of the current namespace (*ns*) as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:single-form '(+ 1 2)}))\n\nRender a single value as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:single-value 3}))\n\nRender a single value as HTML and process the resulting HTML using a custom function.\n\n(comment\n  (clay/make! {:single-value 3333\n               :post-process (fn [html]\n                               (-&gt; html\n                                   (str/replace #\"3333\" \"4444\")))}))\n\nRender a namespace as HTML and hide the UI banner in the browser view.\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :hide-ui-header true}))\n\nRender a namespace as HTML and hide the information line at the bottom of the page.\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :hide-info-line true}))\n\nRender a namespace as GitHub Flavoured Markdown (partial support, work-in-progress).\n\n(comment\n  (clay/make! {:source-path \"notebooks/index.clj\"\n               :format [:gfm]}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as a Quarto qmd file then, using Quarto, render that file as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :source-path \"notebooks/index.clj\"}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as a Quarto qmd file, but skip this action if the target file already exists\n\n(comment\n  (clay/make! {:format        [:quarto :html]\n               :source-path   \"notebooks/index.clj\"\n               :keep-existing true\n               :external-requirements [\"secret.txt\"]}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as a Quarto qmd file and show it at the browser: (note the current browser view of this format it not so sophisticated and lacks live-reload on page updates).\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :source-path \"notebooks/index.clj\"\n               :run-quarto false}))\n\nEvaluate and render the namespace in \"notebooks/slides.clj\" as a Quarto qmd file (using its namespace-specific config from the ns metadata) then, using Quarto, render that file as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :source-path \"notebooks/slides.clj\"}))\n\nEvaluate and render the namespace in \"notebooks/slides.clj\" as a Quarto qmd file (using its namespace-specific config from the ns metadata) then, using Quarto, render that file as a reveal.js slideshow and show it at the browser:\n\n(comment\n  (clay/make! {:format [:quarto :revealjs]\n               :source-path \"notebooks/slides.clj\"}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as a Quarto qmd file with a custom Quarto config then, using Quarto, render that file as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :source-path \"notebooks/index.clj\"\n               :quarto {:highlight-style :nord\n                        :format {:html {:theme :journal}}}}))\n\nEvaluate and render the namespace in \"notebooks/index.clj\" as a Quarto qmd file with a custom Quarto config where the higlight style is fetched from the scicloj.clay.v2.quarto.highlight-styles namespace, and the theme is fetched from the scicloj.clay.v2.quarto.themes namespace, then, using Quarto, render that file as HTML and show it at the browser:\n\n(comment\n  (require '[scicloj.clay.v2.quarto.highlight-styles :as quarto.highlight-styles]\n           '[scicloj.clay.v2.quarto.themes :as quarto.themes])\n  (clay/make! {:format [:quarto :html]\n               :source-path \"notebooks/index.clj\"\n               :quarto {:highlight-style quarto.highlight-styles/nord\n                        :format {:html {:theme quarto.themes/journal}}}}))\n\nEvaluate and render the namespace in \"index.clj\" under the \"notebooks\" directory as HTML and show it at the browser:\n\n(comment\n  (clay/make! {:base-source-path \"notebooks/\"\n               :source-path \"index.clj\"}))\n\nEvaluate and render all files in base-source-path:\n\n(comment\n  (clay/make! {:base-source-path \"other_notebooks\"\n               :render true}))\n\nCreate a Quarto book with a default generated index page:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :base-source-path \"notebooks\"\n               :source-path [\"chapter.clj\"\n                             \"another_chapter.md\"\n                             \"a_chapter_with_R_code.Rmd\"\n                             \"test.ipynb\"]\n               :base-target-path \"book\"\n               :book {:title \"Book Example\"}\n               ;; Empty the target directory first:\n               :clean-up-target-dir true}))\n\nCreate a Quarto book with a specified favicon:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :base-source-path \"notebooks\"\n               :source-path [\"index.clj\"\n                             \"chapter.clj\"\n                             \"another_chapter.md\"]\n               :base-target-path \"book\"\n               :book {:title \"Book Example\"\n                      :favicon \"notebooks/favicon.ico\"}\n               ;; Empty the target directory first:\n               :clean-up-target-dir true}))\n\nCreate a Quarto book with book parts:\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :base-source-path \"notebooks\"\n               :source-path [{:part \"Part A\"\n                              :chapters [\"index.clj\"\n                                         \"chapter.clj\"]}\n                             {:part \"Part B\"\n                              :chapters [\"another_chapter.md\"]}]\n               :base-target-path \"book\"\n               :book {:title \"Book Example\"}\n               ;; Empty the target directory first:\n               :clean-up-target-dir true}))\n\nRender an expression that includes a path to a file. The file is automatically synced, since is under \"notebooks\", which is one of the directories synced by default (:subdirs-to-sync). Note that, by default, the root \"notebooks\" is included in the target file path.\n\n(comment\n  (clay/make! {:single-value (kind/hiccup\n                              [:img {:src \"notebooks/images/Clay.svg.png\"}])}))\n\nRender an expression that includes a path to a file. The file is automatically synced, since is under \"notebooks\", which is one of the directories synced by default (:subdirs-to-sync). Here, we override the default behaviour, so the root \"notebooks\" is not included in the target file path\n\n(comment\n  (clay/make! {:single-value (kind/hiccup\n                              [:img {:src \"images/Clay.svg.png\"}])\n               :keep-sync-root false}))\n\nDemonstrate that we can use the same source and target paths.\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :base-source-path \"notebooks\"\n               :source-path \"demo.clj\"\n               :base-target-path \"notebooks\"}))\n\nDemonstrate that we can use the same source and target paths – another variation with :keep-sync-root false – in this case, no syncing will take place, because the relevant files already exist in place.\n\n(comment\n  (clay/make! {:format [:quarto :html]\n               :base-source-path \"notebooks\"\n               :source-path \"demo.clj\"\n               :base-target-path \"notebooks\"\n               :keep-sync-root false}))\n\nRender a notebook in a nested source path. By default, the target path is flattened. E.g., \"temp/notebooks.subdir.another_demo.html\".\n\n(comment\n  (clay/make! {:source-path \"notebooks/subdir/another_demo.clj\"}))\n\nRender a notebook but avoid the flattening default behaviour, so that thee target path is not flattened. E.g., \"temp/notebooks/subdir/another_demo.html\".\n\n(comment\n  (clay/make! {:source-path \"notebooks/subdir/another_demo.clj\"\n               :flatten-targets false}))\n\nDemonstrate a combination of :flatten-targets false and :keep-sync-root false.\n\n(comment\n  (clay/make! {:source-path \"notebooks/demo.clj\"\n               :flatten-targets false\n               :keep-sync-root false}))\n\nReopen the Clay view in the browser (in case you closed the browser tab previously opened):\n\n(comment\n  (clay/browse!))\n\n\n1.8.1 Live reload\n(experimental)\nClay can listen to file changes (using nextjournal/beholder) and respond with remaking the page.\nSee the example above with :live-reload true.\nOne caveat: You may not want to use this if the containing directory of this file has a lot of files and/or sub-directories, as it may take quite a long time (e.g. ~1 minute) for beholder to watch the containing directory for file changes.\n\n\n1.8.2 Hiccup output\n(experimental 🛠)\nRender a notebook in Hiccup format and return the resulting Hiccup structure:\n\n(comment\n  (clay/make-hiccup {:source-path \"notebooks/index.clj\"}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#cli",
    "href": "index.html#cli",
    "title": "Clay Documentation",
    "section": "1.9 CLI",
    "text": "1.9 CLI\n(experimental)\nYou can launch Clay From the command line:\nclojure -M -m scicloj.clay.v2.main\nClay will watch the notebooks directory in live-reload mode, as described in the Live reload section.\nAdd a :clay alias to your deps.edn to make it easier to launch:\n{:aliases\n  {:clay {:main-opts [\"-m\" \"scicloj.clay.v2.main\"]}}}\nThen you can run it a little more conveniently:\nclojure -M:clay\nFiles and directories to watch can be passed as arguments. If .clj files are passed, they will be immediately rendered as HTML.\nFor example:\nImmediately render my-namespace and watch notebooks.\nclojure -M -m scicloj.clay.v2.main notebooks/my_namespace.clj\nWatch notebooks1 and notebooks2 instead of notebooks:\nclojure -M -m scicloj.clay.v2.main notebooks1 notebooks2\nThe -r or --render argument cancels the live-reload behaviour and can be used for rendering files as a batch task.\nFor example:\nImmediately render my-namespace and exit:\nclojure -M -m scicloj.clay.v2.main notebooks/my_namespace.clj -r\nImmediately render all notebooks found in base-source-path and exit:\nclojure -M:clay -r",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#configuration",
    "href": "index.html#configuration",
    "title": "Clay Documentation",
    "section": "1.10 Configuration",
    "text": "1.10 Configuration\nCalls to the make! function are affected by various parameters which collected as one nested map. This map is the result of deep-merging configuration sources:\n\ndefault: clay-default.edn under Clay’s resources\nuser: clay.edn in project root\nnamespace: :clay metadata found on the ns form\ncall: the argument to make!\n\nHere are some of the parameters worth knowing about:\n\n\n\n\n\n\n\n\nKey\nPurpose\nExample\n\n\n\n\n:source-path\nfiles to render\n[\"notebooks/index.clj\"]\n\n\n:title\nsets the HTML title that appears in the browser tab bar\n\"My Title\"\n\n\n:favicon\nsets a page favicon\n\"favicon.ico\"\n\n\n:show\nwhen true (the default) updates the browser view (starts the HTML server if necessary)\nfalse\n\n\n:browse\nwhen true (the default) opens a new browser tab when the HTML server is started for the first time\nfalse\n\n\n:ide\n(experimental) causes make! to open a webview instead of browser, use :browse :browser to avoid\n:calva\n\n\n:single-form\nrender just one form\n(inc 1)\n\n\n:format\noutput quarto markdown and/or html\n[:quarto :html]\n\n\n:quarto\nadds configuration for Quarto\n{:highlight-style :solarized}\n\n\n:base-target-path\nthe output directory\n\"temp\"\n\n\n:base-source-path\nwhere to find :source-path\n\"notebooks\"\n\n\n:clean-up-target-dir\ndelete (!) target directory before repopulating it\ntrue\n\n\n:remote-repo\nlinking to source\n{:git-url \"https://github.com/scicloj/clay\" :branch  \"main\"}\n\n\n:hide-info-line\nhiding the source reference at the bottom\ntrue\n\n\n:hide-ui-header\nhiding the ui info at the top\ntrue\n\n\n:pprint-margin\nresult rendering will try to wrap anything going beyond this value\nnil or 72\n\n\n:post-process\npost-processing the resulting HTML\n#(str/replace \"#3\" \"4\")\n\n\n:live-reload\nmake automatically after its source file is changed\ntrue or :toggle\n\n\n:flatten-targets\n(experimental) whether to place the output in a subdirectory or not\nfalse\n\n\n:subdirs-to-sync\n(experimental) subdirs to copy non-clojure files from\n[\"static\"]\n\n\n:keep-sync-root\n(experimental) keep the subdir prefix\nfalse\n\n\n:render\n(experimental) overrides :show :serve :browse and :live-reload to false\ntrue\n\n\n:aliases | (experimental) a vector of aliases (sub maps in configuration) to merge |[:markdown]| |:config/transform| (experimental) hook to update config per namespace |:config/transform my.ns/my-fn| |:keep-existing| defaults tofalsefor single targets,truefor multiple targets |true| |:external-requirements| skip file if both:external-requirementsand:keep-existing|[“secret.txt”]| |:quarto-target-path| a Quarto project root where qmd files should be created |“site”`\n\n\n\n\n\nWhen working interactively, it is helpful to render to a temporary directory that can be git ignored and discarded. For example: you may set :base-target-path \"temp\" at your clay.edn file. When publishing a static page, you may wish to target a docs directory by setting :base-target-path \"docs\" in your call to clay/make!. Creating a dev namespace is a good way to invoke a different configuration for publishing.\nRendering a result is based on clojure.pprint/pprint behaviour. By default, it will wrap anything beyond clojure.pprint/*print-right-margin* (default: 72) number of chars in the single line. For example (range 100) will be rendered as long vertical list of numbers. You can overwrite it by setting :pprint-margin option. When set to nil there won’t be wrapping at all and (range 100) will be rendered in one horizontal list of numbers.\nAliases let you define reusable config fragments and selectively apply them. Add an :aliases map to your config with named configurations, then activate them using :merge-aliases (for one-time use) or :reset-aliases (to persist across invocations). For example, you might use :merge-aliases [:markdown] to generate Quarto-friendly Markdown from the REPL, or :reset-aliases [:html] in your IDE to default to full HTML rendering. Alternatively you can (reset! scicloj.clay.v2.config/*current-aliases aliases). Aliases are deeply merged into the base config in order.\n\n1.10.1 Namespace configuration and front matter\nConfiguration is discovered as metadata under the :clay key on the namespace form:\n\n^{:clay {:quarto {:myfrontmatterkey \"myfrontmattervalue\"}}}\n(ns index)\n\n\nthe clay metadata is on the form rather than the var itself.\nthe :quarto configuration will be placed in the front matter for markdown output.\n\nSee Quarto front matter docs.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#kinds",
    "href": "index.html#kinds",
    "title": "Clay Documentation",
    "section": "1.11 Kinds",
    "text": "1.11 Kinds\nThe way things should be visualized is determined by the Kindly specification.\nKindly advises tools (like Clay) about the kind of way a given context should be displayed, by assigning to it a so-called kind.\nPlease refer to the Kindly documentation for details about specifying and using kinds.\nIn this documentation we demonstrate Kindly’s default advice. User-defined Kindly advices should work as well.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "Clay Documentation",
    "section": "1.12 Examples",
    "text": "1.12 Examples\nSee the dedicated 📖 Examples chapter 📖 of this book.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#fragments",
    "href": "index.html#fragments",
    "title": "Clay Documentation",
    "section": "1.13 Fragments",
    "text": "1.13 Fragments\nkind/fragment is a special kind. It expects a sequential value and generates multiple items, of potentially multiple kinds, from its elements.\n\n(-&gt;&gt; [\"purple\" \"darkgreen\" \"brown\"]\n     (mapcat (fn [color]\n               [(kind/md (str \"### subsection: \" color))\n                (kind/hiccup [:div {:style {:background-color color\n                                            :color \"lightgrey\"}}\n                              [:big [:p color]]])]))\n     kind/fragment)\n\n\n1.13.1 subsection: purple\npurple\n\n\n1.13.2 subsection: darkgreen\ndarkgreen\n\n\n1.13.3 subsection: brown\nbrown\n\n(-&gt;&gt; (range 3)\n     kind/fragment)\n\n\n0\n\n\n1\n\n\n2\n\nImportantly, markdown subsections affect the Quarto table of contents.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#functions",
    "href": "index.html#functions",
    "title": "Clay Documentation",
    "section": "1.14 Functions",
    "text": "1.14 Functions\nkind/fn is a special kind. It is displayed by first evaluating a given function and arguments, then proceeding recursively with the resulting value.\nThe function can be specified through the Kindly options.\n\n(kind/fn {:x 1\n          :y 2}\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))})\n\n\n3\n\n\n(kind/fn {:my-video-src \"https://file-examples.com/storage/fe58a1f07d66f447a9512f1/2017/04/file_example_MP4_480_1_5MG.mp4\"}\n  {:kindly/f (fn [{:keys [my-video-src]}]\n               (kind/video\n                {:src my-video-src}))})\n\n\nIf the value is a vector, the function is the first element, and the arguments are the rest.\n\n(kind/fn\n  [+ 1 2])\n\n\n3\n\nIf the value is a map, the function is held at the key :kindly/f, and the argument is the map.\n\n(kind/fn\n  {:kindly/f (fn [{:keys [x y]}]\n               (+ x y))\n   :x 1\n   :y 2})\n\n\n3\n\nThe kind of the value returned by the function is respected. For example, here are examples with a function returning kind/dataset.\n\n(kind/fn\n  {:x (range 3)\n   :y (repeatedly 3 rand)}\n  {:kindly/f tc/dataset})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.87206960\n\n\n1\n0.23360469\n\n\n2\n0.05718759\n\n\n\n\n\n(kind/fn\n  [tc/dataset\n   {:x (range 3)\n    :y (repeatedly 3 rand)}])\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.13012308\n\n\n1\n0.01687247\n\n\n2\n0.56675141\n\n\n\n\n\n(kind/fn\n  {:kindly/f tc/dataset\n   :x (range 3)\n   :y (repeatedly 3 rand)})\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.31219393\n\n\n1\n0.47782209\n\n\n2\n0.93993842",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#javascript-functions",
    "href": "index.html#javascript-functions",
    "title": "Clay Documentation",
    "section": "1.15 JavaScript Functions",
    "text": "1.15 JavaScript Functions\n(coming soon)\nVisualizations are often compiled to JavaScript which can make use of functions. To make this accessible, Regex expressions are treated as JavaScript literals. Clojure has a Regex syntax #“…”, making it convenient for inserting code. In this example, the tooltip formatter is an inline JavaScript function:\n\n(kind/echarts\n {:title {:text \"Echarts Example\"}\n  :tooltip {:formatter #\"(params) =&gt; 'hello: ' + params.name\"}\n  :legend {:data [\"sales\"]}\n  :xAxis {:data [\"Shirts\", \"Cardigans\", \"Chiffons\",\n                 \"Pants\", \"Heels\", \"Socks\"]}\n  :yAxis {}\n  :series [{:name \"sales\"\n            :type \"bar\"\n            :data [5 20 36\n                   10 10 20]}]})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#delays",
    "href": "index.html#delays",
    "title": "Clay Documentation",
    "section": "1.16 Delays",
    "text": "1.16 Delays\nClojure Delays are a common way to define computations that do not take place immediately. The computation takes place when dereferencing the value for the first time.\nClay makes sure to dererence Delays when passing values for visualization.\nThis is handy for slow example snippets and explorations, that one would typically not like to slow down the evaluation of the whole namespace, but would like to visualize them on demand and also include in them in the final document.\n\n(delay\n  (Thread/sleep 500)\n  (+ 1 2))\n\n\n3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#referring-to-files",
    "href": "index.html#referring-to-files",
    "title": "Clay Documentation",
    "section": "1.17 Referring to files",
    "text": "1.17 Referring to files\nIn data visualizations, one can directly refrer to files places under \"notebooks/\" or \"src/\". By default, all files except of these directories, except for Clojure files, are copied alongside the HTML target.\nThis default can be overridden using the :subdirs-to-sync config option. E.g., :subdirs-to-sync [\"notebooks\" \"data\"] will copy files from the \"notebooks\" and \"data\" directories, but not from \"src\". Clojure source files (.clj, etc.) are not synched.\nNote that the URLs we use below need to include the root directory from which files are synced, which is \"notebooks\" in these cases. This is because, by default, a file like \"notebooks/images/Clay.svg.png\" will be copied to something like \"target/notebooks/images/Clay.svg.png\" in the sync step, assuming:base-target-pathis“target”`.\nTo override this behaviour, one may set :keep-sync-root to false. Then,a file like \"notebooks/images/Clay.svg.png\" will be copied to something like \"target/images/Clay.svg.png\" in the sync step, and it will not be necessary to include the“notebooks”` prefix in the code.\n\n(kind/hiccup\n [:img {:src \"notebooks/images/Clay.svg.png\"}])\n\n\n\n(kind/image\n {:src \"notebooks/images/Clay.svg.png\"})\n\n\n\n\n\n(kind/vega-lite\n {:data {:url \"notebooks/datasets/iris.csv\"},\n  :mark \"rule\",\n  :encoding {:opacity {:value 0.2}\n             :size {:value 3}\n             :x {:field \"sepal_width\", :type \"quantitative\"},\n             :x2 {:field \"sepal_length\", :type \"quantitative\"},\n             :y {:field \"petal_width\", :type \"quantitative\"},\n             :y2 {:field \"petal_length\", :type \"quantitative\"},\n             :color {:field \"species\", :type \"nominal\"}}\n  :background \"floralwhite\"})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#hiding-code",
    "href": "index.html#hiding-code",
    "title": "Clay Documentation",
    "section": "1.18 Hiding code",
    "text": "1.18 Hiding code\nBy default, a Clay notebook shows both the code and the result of an evaluated form. Here are a few ways one may hide the code:\n\nAdd the metadata :kindly/hide-code true to the form (e.g., by preceding it with ^:kindly/hide-code).\nAdd the metadata :kindly/hide-code true to the value.\nGlobally define certain kinds (e.g., :kind/md, :kind/hiccup) to always hide code (on project level or namespace level) by adding theme as a set to the project config or namespace config, e.g., :kindly/options {:kinds-that-hide-code #{:kind/md :kind/hiccup}}.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#test-generation",
    "href": "index.html#test-generation",
    "title": "Clay Documentation",
    "section": "1.19 Test generation",
    "text": "1.19 Test generation\n(experimental 🛠)\nSee the dedicated 📖 Test generation chapter 📖 of this book.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#css-classes-and-styles",
    "href": "index.html#css-classes-and-styles",
    "title": "Clay Documentation",
    "section": "1.20 CSS classes and styles",
    "text": "1.20 CSS classes and styles\n\n1.20.1 Styling HTML visualizations\nClay will transfer CSS classes and styles present in :kindly/options metadata to the visualization. The recommended way to prepare :kindly/options metadata is through the kind api:\n\n(kind/table {:column-names [\"A\" \"B\" \"C\"]\n             :row-vectors  [[1 2 3] [4 5 6]]}\n            {:class \"table-responsive\"\n             :style {:background \"#f8fff8\"}})\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n\n\n\nSee also the Kindly documentation on passing options. Optional class and style attributes will only be applied to hiccup elements (not markdown content).\n\n\n1.20.2 Styling Markdown content\nQuarto uses pandoc attributes (see https://quarto.org/docs/authoring/markdown-basics.html#sec-divs-and-spans) to attach classes.\n::: {.alert .alert-primary}\nExample alert\n:::\n\nExample alert\n\n\n\nThis table is responsive\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n\n\nMarkdown styling is not currently handled when rendering direct to HTML.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "index.html#varying-kindly-options",
    "href": "index.html#varying-kindly-options",
    "title": "Clay Documentation",
    "section": "1.21 Varying kindly options",
    "text": "1.21 Varying kindly options\n(experimental)\nkindly/merge-options! varies the options to affect the notes coming below. Let us use it to present code and value horizontally. By default, calls to kindly/merge-options! are hidden. In this document, we use #(kindly/hide-code % false) to make them visible.`\n\n(kindly/hide-code\n (kindly/merge-options! {:code-and-value :horizontal})\n false)\n\n\n\n\n(+ 1 2)\n\n\n\n\n3\n\n\n\n\n\n\n(+ 3 4)\n\n\n\n\n7\n\n\n\nLet us change it back.\n\n(kindly/hide-code\n (kindly/merge-options! {:code-and-value :vertical})\n false)\n\n\n(+ 1 2)\n\n\n3\n\n\n(+ 3 4)\n\n\n7\n\nLet us now change the background color.\n\n(kindly/hide-code\n (kindly/merge-options! {:style {:background-color \"#ccddee\"}})\n false)\n\n\n(kind/hiccup\n [:div\n  [:p \"hello\"]])\n\nhello\nIn Quarto-based rendering, datasets are rendered as plain Markdown, and HTML options are not applied at the moment.\n\n(tc/dataset {:x (range 3)})\n\n\n_unnamed [3 1]:\n\n\n\n:x\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n\n\nTo make sure the background color is applied, we wrap it with Hiccup.\n\n(kind/hiccup\n [:div\n  (tc/dataset {:x (range 3)})])\n\n_unnamed [3 1]:\n\n\n\n:x\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n\n\nLet us cancel the setting of the background color.\n\n(kindly/hide-code\n (kindly/merge-options! {:style {:background-color nil}})\n false)\n\n\n(kind/hiccup\n [:div\n  [:p \"hello\"]])\n\nhello\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Clay</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html",
    "href": "clay_book.examples.html",
    "title": "2  Examples",
    "section": "",
    "text": "2.1 Plain values\nThis chapter lists various usage examples of Clay. Most of the behaviours demonstrated here are defined by the Kindly specification.\nBy default, when there is no kind information provided by Kindly, values are simply pretty-printed.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#plain-values",
    "href": "clay_book.examples.html#plain-values",
    "title": "2  Examples",
    "section": "",
    "text": "(+ 4 5)\n\n\n9\n\n\n(str \"abcd\" \"efgh\")\n\n\n\"abcdefgh\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#hidden",
    "href": "clay_book.examples.html#hidden",
    "title": "2  Examples",
    "section": "2.2 Hidden",
    "text": "2.2 Hidden\nValues of :kind/hidden are not shown.\n\n(kind/hidden 9)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#hiccup",
    "href": "clay_book.examples.html#hiccup",
    "title": "2  Examples",
    "section": "2.3 Hiccup",
    "text": "2.3 Hiccup\nHiccup, a popular Clojure way to represent HTML, can be specified by kind:\n\n(kind/hiccup\n [:ul\n  [:li [:p \"hi\"]]\n  [:li [:big [:big [:p {:style ; https://www.htmlcsscolor.com/hex/7F5F3F\n                        {:color \"#7F5F3F\"}}\n                    \"hello\"]]]]])\n\nhihello\nAs we can see, this kind is displayed by converting Hiccup to HTML.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#reagent",
    "href": "clay_book.examples.html#reagent",
    "title": "2  Examples",
    "section": "2.4 Reagent",
    "text": "2.4 Reagent\nWith kind/reagent, one may render Reagent components.\n\n(kind/reagent\n ['(fn [numbers]\n     [:p {:style {:background \"#d4ebe9\"}}\n      (pr-str (map inc numbers))])\n  (vec (range 40))])\n\n\nFrom the reagent tutorial:\n\n(kind/reagent\n ['(fn []\n     (let [*click-count (reagent.core/atom 0)]\n       (fn []\n         [:div\n          \"The atom \" [:code \"*click-count\"] \" has value: \"\n          @*click-count \". \"\n          [:input {:type \"button\" :value \"Click me!\"\n                   :on-click #(swap! *click-count inc)}]])))])\n\n\n\n(kind/reagent\n ['(fn [{:keys [spec0\n                transition\n                time-for-transition]}]\n     (let [*spec (reagent.core/atom spec0)]\n       (fn []\n         ^{:key @*spec}\n         [:div\n          [:div {:style {:height \"400px\"}\n                 :ref (fn [el]\n                        (when el\n                          (let [chart (.init js/echarts el)]\n                            (.setOption chart (clj-&gt;js @*spec)))))}]\n          (js/setInterval #(swap! *spec transition) time-for-transition)\n          ;; Include this to force component update:\n          [:p {:style {:display :none}}\n           (hash @*spec)]])))\n  {:spec0 {:title {:text \"Echarts Example\"}\n           :tooltip {}\n           :legend {:data [\"sales\"]}\n           :xAxis {:data [\"Shirts\", \"Cardigans\", \"Chiffons\",\n                          \"Pants\", \"Heels\", \"Socks\"]}\n           :yAxis {}\n           :series [{:name \"sales\"\n                     :type \"bar\"\n                     :data [5 20 36\n                            10 10 20]}]}\n   :transition '(fn [spec]\n                  (update-in spec\n                             [:series 0 :data]\n                             (partial map #(+ %\n                                              (rand-int 10)\n                                              -5))))\n   :time-for-transition 1000}]\n {:html/deps [:echarts]})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#scittle",
    "href": "clay_book.examples.html#scittle",
    "title": "2  Examples",
    "section": "2.5 Scittle",
    "text": "2.5 Scittle\nWith kind/scittle, one may specify Clojurescript code to run through Scittle.\n\n(kind/scittle\n '(.log js/console \"hello\"))\n\n\n\n(kind/scittle\n '(defn f [x]\n    (+ x 9)))\n\n\n\n(kind/reagent\n ['(fn []\n     [:p (f 11)])])\n\n\nCode defined with kind/scittle is by default evaluated asynchronously, which fits very well with Reagent. However, the Scittle API allows to turn off this default and force synchronous evaluation with the following JavaScript commands:\n\nscittle.core.disable_auto_eval();\nscittle.core.eval_script_tags();\n\nAlso the Small Clojure Interpreter wich powers Scittle is exposed to JavaScript. Because within this notebook the default evaluation is still active, you can check in the browser console that the following string 123 appears before the above hello.\n\n(kind/html\n\"&lt;script&gt;\nscittle.core.eval_string('(.log js/console 123)')\n&lt;/script&gt;\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#html",
    "href": "clay_book.examples.html#html",
    "title": "2  Examples",
    "section": "2.6 HTML",
    "text": "2.6 HTML\nRaw html can be represented as a kind too:\n\n(kind/html \"&lt;div style='height:40px; width:40px; background:purple'&gt;&lt;/div&gt; \")\n\n \n\n(kind/html\n \"\n&lt;svg height=100 width=100&gt;\n&lt;circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' /&gt;\n&lt;/svg&gt; \")\n\n\n\n\n \n\n(kind/html\n [\"&lt;svg height=100 width=100&gt;\"\n  \"&lt;circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' /&gt;\"\n  \"&lt;/svg&gt;\"])\n\n\n\n\n\n(kind/html\n (list\n  \"&lt;svg height=100 width=100&gt;\"\n  \"&lt;circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' /&gt;\"\n  \"&lt;/svg&gt;\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#markdown",
    "href": "clay_book.examples.html#markdown",
    "title": "2  Examples",
    "section": "2.7 Markdown",
    "text": "2.7 Markdown\nMarkdown text (a string or a vector of strings) can be handled using a kind too.\n\n(kind/md\n \"This is [markdown](https://www.markdownguide.org/).\")\n\nThis is markdown.\n\n(kind/md\n [\"\n* This is [markdown](https://www.markdownguide.org/).\n  * *Isn't it??*\"\n  \"\n* Here is **some more** markdown.\"])\n\n\nThis is markdown.\n\nIsn’t it??\n\nHere is some more markdown.\n\n\n(kind/md\n (list\n  \"\n* This is [markdown](https://www.markdownguide.org/).\n  * *Isn't it??*\"\n  \"\n* Here is **some more** markdown.\"))\n\n\nThis is markdown.\n\nIsn’t it??\n\nHere is some more markdown.\n\nLaTeX formulae are supported as well.\n\n(kind/md\n \"Let $x=9$. Then $$x+11=20$$\")\n\nLet \\(x=9\\). Then \\[x+11=20\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#tex",
    "href": "clay_book.examples.html#tex",
    "title": "2  Examples",
    "section": "2.8 TeX",
    "text": "2.8 TeX\n\n(kind/tex \"x^2=\\\\alpha\")\n\n\\[x^2=\\alpha\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#code",
    "href": "clay_book.examples.html#code",
    "title": "2  Examples",
    "section": "2.9 Code",
    "text": "2.9 Code\nClojure code can be annotated with kind/code.\n\n(kind/code \"(update {:x 9} :x inc)\")\n\n\n(update {:x 9} :x inc)\n\n\n(kind/code\n [\"(update {:x 9} :x inc)\"\n  \"(update {:x 9} :x dec)\"])\n\n\n(update {:x 9} :x inc)\n\n\n(update {:x 9} :x dec)\n\n\n(kind/code\n (list\n  \"(update {:x 9} :x inc)\"\n  \"(update {:x 9} :x dec)\"))\n\n\n(update {:x 9} :x inc)\n\n\n(update {:x 9} :x dec)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#images",
    "href": "clay_book.examples.html#images",
    "title": "2  Examples",
    "section": "2.10 Images",
    "text": "2.10 Images\nJava BufferedImage objects are displayed as images.\n\n(import javax.imageio.ImageIO\n        java.net.URL)\n\n\njava.net.URL\n\n\n(defonce clay-image\n  (-&gt;  \"https://upload.wikimedia.org/wikipedia/commons/2/2c/Clay-ss-2005.jpg\"\n       (URL.)\n       (ImageIO/read)))\n\n\nclay-image\n\n\n\n\nUrls to images can be annotated as images as well.\n\n(kind/image\n {:src \"https://upload.wikimedia.org/wikipedia/commons/2/2c/Clay-ss-2005.jpg\"})\n\n\n\n\nOther image representations are currently not supported.\n\n(kind/image\n \"AN IMAGE\")\n\n\nunsupported image format",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#plain-data-structures",
    "href": "clay_book.examples.html#plain-data-structures",
    "title": "2  Examples",
    "section": "2.11 Plain data structures",
    "text": "2.11 Plain data structures\nPlain data structures (lists and sequnces, vectors, sets, maps) are pretty printed if there isn’t any value inside which needs to be displayed in special kind of way.\n\n(def people-as-maps\n  (-&gt;&gt; (range 29)\n       (mapv (fn [i]\n               {:preferred-language ([\"clojure\" \"clojurescript\" \"babashka\"]\n                                     (rand-int 3))\n                :age (rand-int 100)}))))\n\n\n(def people-as-vectors\n  (-&gt;&gt; people-as-maps\n       (mapv (juxt :preferred-language :age))))\n\n\n(take 5 people-as-maps)\n\n\n({:preferred-language \"babashka\", :age 23}\n {:preferred-language \"clojure\", :age 1}\n {:preferred-language \"babashka\", :age 84}\n {:preferred-language \"babashka\", :age 78}\n {:preferred-language \"clojurescript\", :age 29})\n\n\n(take 5 people-as-vectors)\n\n\n([\"babashka\" 23]\n [\"clojure\" 1]\n [\"babashka\" 84]\n [\"babashka\" 78]\n [\"clojurescript\" 29])\n\n\n(-&gt;&gt; people-as-vectors\n     (take 5)\n     set)\n\n\n#{[\"clojure\" 1]\n  [\"clojurescript\" 29]\n  [\"babashka\" 84]\n  [\"babashka\" 23]\n  [\"babashka\" 78]}\n\nWhen something inside needs to be displayed in a special kind of way, the data structures are printed in a way that makes that clear.\n\n(def nested-structure-1\n  {:vector-of-numbers [2 9 -1]\n   :vector-of-different-things [\"hi\"\n                                (kind/hiccup\n                                 [:big [:big \"hello\"]])]\n   :map-of-different-things {:markdown (kind/md [\"*hi*, **hi**\"])\n                             :number 9999}\n   :hiccup (kind/hiccup\n            [:big [:big \"bye\"]])\n   :dataset (tc/dataset {:x (range 3)\n                         :y [:A :B :C]})})\n\n\nnested-structure-1\n\n{:vector-of-numbers [2 9 -1]\n\n\n\n\n\n\n\n\n:vector-of-different-things\n\n\n\n[\n\n\n\"hi\"\n\nhello\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n:map-of-different-things\n\n\n\n{\n\n\n\n\n\n\n\n\n\n:markdown\n\n\n\nhi, hi\n\n\n\n\n\n\n:number 9999\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n:hiccup\n\n\nbye\n\n\n\n\n\n\n\n\n\n\n\n\n:dataset\n\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n:A\n\n\n1\n:B\n\n\n2\n:C\n\n\n\n\n\n\n\n\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#pretty-printing",
    "href": "clay_book.examples.html#pretty-printing",
    "title": "2  Examples",
    "section": "2.12 Pretty printing",
    "text": "2.12 Pretty printing\nThe :kind/pprint kind makes sure to simply pretty-print values:\n\n(kind/pprint nested-structure-1)\n\n\n{:vector-of-numbers [2 9 -1],\n :vector-of-different-things [\"hi\" [:big [:big \"hello\"]]],\n :map-of-different-things {:markdown [\"*hi*, **hi**\"], :number 9999},\n :hiccup [:big [:big \"bye\"]],\n :dataset _unnamed [3 2]:\n\n| :x | :y |\n|---:|----|\n|  0 | :A |\n|  1 | :B |\n|  2 | :C |\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#datasets",
    "href": "clay_book.examples.html#datasets",
    "title": "2  Examples",
    "section": "2.13 Datasets",
    "text": "2.13 Datasets\ntech.ml.dataset datasets currently use the default printing of the library,\nLet us create such a dataset using Tablecloth.\n\n(require '[tablecloth.api :as tc])\n\n\n(-&gt; {:x (range 6)\n     :y [:A :B :C :A :B :C]}\n    tc/dataset)\n\n\n_unnamed [6 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n:A\n\n\n1\n:B\n\n\n2\n:C\n\n\n3\n:A\n\n\n4\n:B\n\n\n5\n:C\n\n\n\n\n\n(-&gt; {:x [1 [2 3] 4]\n     :y [:A :B :C]}\n    tc/dataset)\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n1\n:A\n\n\n[2 3]\n:B\n\n\n4\n:C\n\n\n\n\n\n(-&gt; [{:x 1 :y 2 :z 3}\n     {:y 4 :z 5}]\n    tc/dataset)\n\n\n_unnamed [2 3]:\n\n\n\n:x\n:y\n:z\n\n\n\n\n1\n2\n3\n\n\n\n4\n5\n\n\n\n\n\n(-&gt; people-as-maps\n    tc/dataset)\n\n\n_unnamed [29 2]:\n\n\n\n:preferred-language\n:age\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\nbabashka\n58\n\n\nclojurescript\n89\n\n\nbabashka\n16\n\n\nclojurescript\n83\n\n\nclojurescript\n22\n\n\n…\n…\n\n\nbabashka\n97\n\n\nclojurescript\n77\n\n\nbabashka\n10\n\n\nbabashka\n81\n\n\nclojurescript\n11\n\n\nclojure\n46\n\n\nclojurescript\n17\n\n\nbabashka\n78\n\n\nbabashka\n39\n\n\nclojurescript\n50\n\n\nclojurescript\n9\n\n\n\n\nSome kind options of kind/dataset control the way a dataset is printed.\n\n(-&gt; {:x (range 30)}\n    tc/dataset\n    (kind/dataset {:dataset/print-range 6}))\n\n\n_unnamed [30 1]:\n\n\n\n:x\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n…\n\n\n26\n\n\n27\n\n\n28\n\n\n29",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#tables",
    "href": "clay_book.examples.html#tables",
    "title": "2  Examples",
    "section": "2.14 Tables",
    "text": "2.14 Tables\nThe :kind/table kind can be handy for an interactive table view. :kind/table understands many structures which can be rendered as a table.\nA map containing either :row-vectors (sequence of sequences) or row-maps (sequence of maps) keys with optional :column-names.\n\n(kind/table\n {:column-names [:preferred-language :age]\n  :row-vectors people-as-vectors})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\nbabashka\n58\n\n\nclojurescript\n89\n\n\nbabashka\n16\n\n\nclojurescript\n83\n\n\nclojurescript\n22\n\n\nbabashka\n29\n\n\nbabashka\n53\n\n\nbabashka\n53\n\n\nbabashka\n59\n\n\nclojurescript\n15\n\n\nclojurescript\n61\n\n\nclojure\n23\n\n\nclojurescript\n78\n\n\nbabashka\n97\n\n\nclojurescript\n77\n\n\nbabashka\n10\n\n\nbabashka\n81\n\n\nclojurescript\n11\n\n\nclojure\n46\n\n\nclojurescript\n17\n\n\nbabashka\n78\n\n\nbabashka\n39\n\n\nclojurescript\n50\n\n\nclojurescript\n9\n\n\n\n\n\nLack of column names produces table without a header.\n\n(kind/table\n {:row-vectors (take 5 people-as-vectors)})\n\n\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\n\n\n\nColumn names are inferred from a sequence of maps\n\n(kind/table\n {:row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\n\n\n\nWe can limit displayed columns for sequence of maps case.\n\n(kind/table\n {:column-names [:preferred-language]\n  :row-maps (take 5 people-as-maps)})\n\n\n\n\n\n\npreferred-language\n\n\n\n\nbabashka\n\n\nclojure\n\n\nbabashka\n\n\nbabashka\n\n\nclojurescript\n\n\n\n\n\nSequence of sequences and sequence of maps also work\n\n(kind/table (take 5 people-as-vectors))\n\n\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\n\n\n\n\n(kind/table (take 5 people-as-maps))\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\n\n\n\nAdditionally map of sequences is supported (unless it contains :row-vectors or :row-maps key, see such case above).\n\n(kind/table {:x (range 6)\n             :y [:A :B :C :A :B :C]})\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\nA\n\n\n1\nB\n\n\n2\nC\n\n\n3\nA\n\n\n4\nB\n\n\n5\nC\n\n\n\n\n\nA dataset can be also treated as a table input.\n\n(def people-as-dataset\n  (tc/dataset people-as-maps))\n\n\n(-&gt; people-as-dataset\n    kind/table)\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\nbabashka\n58\n\n\nclojurescript\n89\n\n\nbabashka\n16\n\n\nclojurescript\n83\n\n\nclojurescript\n22\n\n\nbabashka\n29\n\n\nbabashka\n53\n\n\nbabashka\n53\n\n\nbabashka\n59\n\n\nclojurescript\n15\n\n\nclojurescript\n61\n\n\nclojure\n23\n\n\nclojurescript\n78\n\n\nbabashka\n97\n\n\nclojurescript\n77\n\n\nbabashka\n10\n\n\nbabashka\n81\n\n\nclojurescript\n11\n\n\nclojure\n46\n\n\nclojurescript\n17\n\n\nbabashka\n78\n\n\nbabashka\n39\n\n\nclojurescript\n50\n\n\nclojurescript\n9\n\n\n\n\n\nAdditional options may hint at way the table should be rendered.\n\n(-&gt; people-as-dataset\n    (kind/table {:element/max-height \"300px\"}))\n\n\n\n\n\n\n\npreferred-language\nage\n\n\n\n\nbabashka\n23\n\n\nclojure\n1\n\n\nbabashka\n84\n\n\nbabashka\n78\n\n\nclojurescript\n29\n\n\nbabashka\n58\n\n\nclojurescript\n89\n\n\nbabashka\n16\n\n\nclojurescript\n83\n\n\nclojurescript\n22\n\n\nbabashka\n29\n\n\nbabashka\n53\n\n\nbabashka\n53\n\n\nbabashka\n59\n\n\nclojurescript\n15\n\n\nclojurescript\n61\n\n\nclojure\n23\n\n\nclojurescript\n78\n\n\nbabashka\n97\n\n\nclojurescript\n77\n\n\nbabashka\n10\n\n\nbabashka\n81\n\n\nclojurescript\n11\n\n\nclojure\n46\n\n\nclojurescript\n17\n\n\nbabashka\n78\n\n\nbabashka\n39\n\n\nclojurescript\n50\n\n\nclojurescript\n9\n\n\n\n\n\n\nIt is possible to use datatables to reneder kind/table, and in this case the user may specify datatables options (see the full list).\n\n(-&gt; people-as-maps\n    tc/dataset\n    (kind/table {:use-datatables true}))\n\n\n\npreferred-languageagebabashka23clojure1babashka84babashka78clojurescript29babashka58clojurescript89babashka16clojurescript83clojurescript22babashka29babashka53babashka53babashka59clojurescript15clojurescript61clojure23clojurescript78babashka97clojurescript77babashka10babashka81clojurescript11clojure46clojurescript17babashka78babashka39clojurescript50clojurescript9\n\n\n\n(-&gt; people-as-dataset\n    (kind/table {:use-datatables true\n                 :datatables {:scrollY 300}}))\n\n\n\npreferred-languageagebabashka23clojure1babashka84babashka78clojurescript29babashka58clojurescript89babashka16clojurescript83clojurescript22babashka29babashka53babashka53babashka59clojurescript15clojurescript61clojure23clojurescript78babashka97clojurescript77babashka10babashka81clojurescript11clojure46clojurescript17babashka78babashka39clojurescript50clojurescript9",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#vega-and-vega-lite",
    "href": "clay_book.examples.html#vega-and-vega-lite",
    "title": "2  Examples",
    "section": "2.15 Vega and Vega-Lite",
    "text": "2.15 Vega and Vega-Lite\n\n(defn vega-lite-point-plot [data]\n  (-&gt; {:data {:values data},\n       :mark \"point\"\n       :encoding\n       {:size {:field \"w\" :type \"quantitative\"}\n        :x {:field \"x\", :type \"quantitative\"},\n        :y {:field \"y\", :type \"quantitative\"},\n        :fill {:field \"z\", :type \"nominal\"}}}\n      kind/vega-lite))\n\n\n(defn random-data [n]\n  (-&gt;&gt; (repeatedly n #(- (rand) 0.5))\n       (reductions +)\n       (map-indexed (fn [x y]\n                      {:w (rand-int 9)\n                       :z (rand-int 9)\n                       :x x\n                       :y y}))))\n\n\n(defn random-vega-lite-plot [n]\n  (-&gt; n\n      random-data\n      vega-lite-point-plot))\n\n\n(random-vega-lite-plot 9)\n\n\nWhen the vega/vega-lite data is given in CSV format, Clay will serve it in a separate CSV file alongside the generated HTML.\n\n(-&gt; {:data {:values \"x,y\n1,1\n2,4\n3,9\n-1,1\n-2,4\n-3,9\"\n            :format {:type :csv}},\n     :mark \"point\"\n     :encoding\n     {:x {:field \"x\", :type \"quantitative\"}\n      :y {:field \"y\", :type \"quantitative\"}}}\n    kind/vega-lite)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#cytoscape",
    "href": "clay_book.examples.html#cytoscape",
    "title": "2  Examples",
    "section": "2.16 Cytoscape",
    "text": "2.16 Cytoscape\nSee the Cytoscape docs.\n\n(def cytoscape-example\n  {:elements {:nodes [{:data {:id \"a\" :parent \"b\"} :position {:x 215 :y 85}}\n                      {:data {:id \"b\"}}\n                      {:data {:id \"c\" :parent \"b\"} :position {:x 300 :y 85}}\n                      {:data {:id \"d\"} :position {:x 215 :y 175}}\n                      {:data {:id \"e\"}}\n                      {:data {:id \"f\" :parent \"e\"} :position {:x 300 :y 175}}]\n              :edges [{:data {:id \"ad\" :source \"a\" :target \"d\"}}\n                      {:data {:id \"eb\" :source \"e\" :target \"b\"}}]}\n   :style [{:selector \"node\"\n            :css {:content \"data(id)\"\n                  :text-valign \"center\"\n                  :text-halign \"center\"}}\n           {:selector \"parent\"\n            :css {:text-valign \"top\"\n                  :text-halign \"center\"}}\n           {:selector \"edge\"\n            :css {:curve-style \"bezier\"\n                  :target-arrow-shape \"triangle\"}}]\n   :layout {:name \"preset\"\n            :padding 5}})\n\n\n(kind/cytoscape\n cytoscape-example)\n\n\n\n(-&gt; cytoscape-example\n    (kind/cytoscape {:style\n                     {:width \"100px\"\n                      :height \"100px\"}}))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#echarts",
    "href": "clay_book.examples.html#echarts",
    "title": "2  Examples",
    "section": "2.17 ECharts",
    "text": "2.17 ECharts\nThis example is taken from Apache ECharts’ Getting Started.\n\n(def echarts-example\n  {:title {:text \"Echarts Example\"}\n   :tooltip {}\n   :legend {:data [\"sales\"]}\n   :xAxis {:data [\"Shirts\", \"Cardigans\", \"Chiffons\",\n                  \"Pants\", \"Heels\", \"Socks\"]}\n   :yAxis {}\n   :series [{:name \"sales\"\n             :type \"bar\"\n             :data [5 20 36\n                    10 10 20]}]})\n\n\n(kind/echarts\n echarts-example)\n\n\n\n(-&gt; echarts-example\n    (kind/echarts {:style\n                   {:width \"500px\"\n                    :height \"200px\"}}))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#plotly",
    "href": "clay_book.examples.html#plotly",
    "title": "2  Examples",
    "section": "2.18 Plotly",
    "text": "2.18 Plotly\nSee the plotly.js docs.\n\n(def plotly-example\n  {:data [{:x [0 1 3 2]\n           :y [0 6 4 5]\n           :z [0 8 9 7]\n           :type :scatter3d\n           :mode :lines+markers\n           :opacity 0.5\n           :line {:width 5}\n           :marker {:size 4\n                    :colorscale :Viridis}}]\n   :layout {:title \"Plotly example\"}})\n\n\n(kind/plotly\n plotly-example)\n\n\n\n(-&gt; plotly-example\n    (kind/plotly {:style\n                  {:width \"300px\"\n                   :height \"300px\"}}))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#highcharts",
    "href": "clay_book.examples.html#highcharts",
    "title": "2  Examples",
    "section": "2.19 Highcharts",
    "text": "2.19 Highcharts\n\n(kind/highcharts\n {:title {:text \"Line chart\"}\n  :subtitle {:text \"By Job Category\"}\n  :yAxis {:title {:text \"Number of Employees\"}}\n  :series [{:name \"Installation & Developers\"\n            :data [43934, 48656, 65165, 81827, 112143, 142383,\n                   171533, 165174, 155157, 161454, 154610]}\n\n           {:name \"Manufacturing\",\n            :data [24916, 37941, 29742, 29851, 32490, 30282,\n                   38121, 36885, 33726, 34243, 31050]}\n\n           {:name \"Sales & Distribution\",\n            :data [11744, 30000, 16005, 19771, 20185, 24377,\n                   32147, 30912, 29243, 29213, 25663]}\n\n           {:name \"Operations & Maintenance\",\n            :data [nil, nil, nil, nil, nil, nil, nil,\n                   nil, 11164, 11218, 10077]}\n\n           {:name \"Other\",\n            :data [21908, 5548, 8105, 11248, 8989, 11816, 18274,\n                   17300, 13053, 11906, 10073]}]\n\n  :xAxis {:accessibility {:rangeDescription \"Range: 2010 to 2020\"}}\n\n  :legend {:layout \"vertical\",\n           :align \"right\",\n           :verticalAlign \"middle\"}\n\n  :plotOptions {:series {:label {:connectorAllowed false},\n                         :pointStart 2010}}\n\n  :responsive {:rules [{:condition {:maxWidth 500},\n                        :chartOptions {:legend {:layout \"horizontal\",\n                                                :align \"center\",\n                                                :verticalAlign \"bottom\"}}}]}})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#observable",
    "href": "clay_book.examples.html#observable",
    "title": "2  Examples",
    "section": "2.20 Observable",
    "text": "2.20 Observable\nObservable visualizations are supported when rendering through Quarto.\nThe following is adapted from the Penguins example in Quarto’s documentation.\nNote that you can save your Clojure data as a csv file and refer to it from within your Observable code. See Referring to files for more information. In this case, we are using the local file, \"notebooks/datasets/palmer-penguins.csv\", which is transparently copied by Clay alongside the target HTML.\n\n(kind/observable\n \"\n//| panel: input\nviewof bill_length_min = Inputs.range(\n                                      [32, 50],\n                                      {value: 35, step: 1, label: 'Bill length (min):'}\n                                      )\nviewof islands = Inputs.checkbox(\n                                 ['Torgersen', 'Biscoe', 'Dream'],\n                                 { value: ['Torgersen', 'Biscoe'],\n                                  label: 'Islands:'\n                                  }\n                                 )\n\nPlot.rectY(filtered,\n            Plot.binX(\n                      {y: 'count'},\n                      {x: 'body_mass_g', fill: 'species', thresholds: 20}\n                      ))\n .plot({\n        facet: {\n                data: filtered,\n                x: 'sex',\n                y: 'species',\n                marginRight: 80\n                },\n        marks: [\n                Plot.frame(),\n                ]\n        }\n       )\nInputs.table(filtered)\npenguins = FileAttachment('notebooks/datasets/palmer-penguins.csv').csv({ typed: true })\nfiltered = penguins.filter(function(penguin) {\n                                           return bill_length_min &lt; penguin.bill_length_mm &&\n                                           islands.includes(penguin.island);\n                                           })\n\")\n\n\nviewof bill_length_min = Inputs.range(\n                                      [32, 50],\n                                      {value: 35, step: 1, label: 'Bill length (min):'}\n                                      )\nviewof islands = Inputs.checkbox(\n                                 ['Torgersen', 'Biscoe', 'Dream'],\n                                 { value: ['Torgersen', 'Biscoe'],\n                                  label: 'Islands:'\n                                  }\n                                 )\n\nPlot.rectY(filtered,\n            Plot.binX(\n                      {y: 'count'},\n                      {x: 'body_mass_g', fill: 'species', thresholds: 20}\n                      ))\n .plot({\n        facet: {\n                data: filtered,\n                x: 'sex',\n                y: 'species',\n                marginRight: 80\n                },\n        marks: [\n                Plot.frame(),\n                ]\n        }\n       )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\npenguins = FileAttachment('notebooks/datasets/palmer-penguins.csv').csv({ typed: true })\nfiltered = penguins.filter(function(penguin) {\n                                           return bill_length_min &lt; penguin.bill_length_mm &&\n                                           islands.includes(penguin.island);\n                                           })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore examples from Quarto’s Observable documentation:\n\n(kind/observable\n \"athletes = FileAttachment('notebooks/datasets/athletes.csv').csv({typed: true})\")\n\n\nathletes = FileAttachment('notebooks/datasets/athletes.csv').csv({typed: true})\n\n\n\n\n\n\n\n(kind/observable\n \"athletes\")\n\n\nathletes\n\n\n\n\n\n\n\n(kind/observable\n \"Inputs.table(athletes)\")\n\n\nInputs.table(athletes)\n\n\n\n\n\n\n\n(kind/observable\n \"\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: 'sex'\n  },\n  marks: [\n    Plot.rectY(\n      athletes,\n      Plot.binX({y: 'count'}, {x: 'weight', fill: 'sex'})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\")\n\n\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: 'sex'\n  },\n  marks: [\n    Plot.rectY(\n      athletes,\n      Plot.binX({y: 'count'}, {x: 'weight', fill: 'sex'})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n(kind/observable\n \"population = FileAttachment('notebooks/datasets/population.json').json()\")\n\n\npopulation = FileAttachment('notebooks/datasets/population.json').json()\n\n\n\n\n\n\n\n(kind/observable\n \"population\")\n\n\npopulation\n\n\n\n\n\n\n\n(kind/observable\n \" import { chart } with { population as data } from '@d3/zoomable-sunburst'\n chart\")\n\n\nimport { chart } with { population as data } from '@d3/zoomable-sunburst'\n chart",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#leaflet",
    "href": "clay_book.examples.html#leaflet",
    "title": "2  Examples",
    "section": "2.21 Leaflet",
    "text": "2.21 Leaflet\nThis example was adapted from the Leaflet website. Note we are defining a tile layer using leaflet-providers.\n\n(kind/reagent\n ['(fn []\n     [:div {:style {:height \"200px\"}\n            :ref (fn [el]\n                   (let [m (-&gt; js/L\n                               (.map el)\n                               (.setView (clj-&gt;js [51.505 -0.09])\n                                         13))]\n                     (-&gt; js/L\n                         .-tileLayer\n                         (.provider \"OpenStreetMap.Mapnik\")\n                         (.addTo m))\n                     (-&gt; js/L\n                         (.marker (clj-&gt;js [51.5 -0.09]))\n                         (.addTo m)\n                         (.bindPopup \"A pretty CSS popup.&lt;br&gt; Easily customizable.\")\n                         (.openPopup))))}])]\n ;; Note we need to mention the dependency:\n {:html/deps [:leaflet]})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#d3",
    "href": "clay_book.examples.html#d3",
    "title": "2  Examples",
    "section": "2.22 D3",
    "text": "2.22 D3\nThe following example is adapted from hiccup-d3. The code is a bit different, e.g. (.scaleOrdinal js/d3 (.-schemeCategory10 js/d3)) instead of (d3/scaleOrdinal d3/schemeCategory10). We still need to figure out how to make hiccup-d3’s examples work as they are.\n\n(let [letter-frequencies [{:letter \"A\", :frequency 0.08167}\n                          {:letter \"B\", :frequency 0.01492}\n                          {:letter \"C\", :frequency 0.02782}\n                          {:letter \"D\", :frequency 0.04253}\n                          {:letter \"E\", :frequency 0.12702}\n                          {:letter \"F\", :frequency 0.02288}\n                          {:letter \"G\", :frequency 0.02015}\n                          {:letter \"H\", :frequency 0.06094}\n                          {:letter \"I\", :frequency 0.06966}\n                          {:letter \"J\", :frequency 0.00153}\n                          {:letter \"K\", :frequency 0.00772}\n                          {:letter \"L\", :frequency 0.04025}\n                          {:letter \"M\", :frequency 0.02406}\n                          {:letter \"N\", :frequency 0.06749}\n                          {:letter \"O\", :frequency 0.07507}\n                          {:letter \"P\", :frequency 0.01929}\n                          {:letter \"Q\", :frequency 0.00095}\n                          {:letter \"R\", :frequency 0.05987}\n                          {:letter \"S\", :frequency 0.06327}\n                          {:letter \"T\", :frequency 0.09056}\n                          {:letter \"U\", :frequency 0.02758}\n                          {:letter \"V\", :frequency 0.00978}\n                          {:letter \"W\", :frequency 0.0236}\n                          {:letter \"X\", :frequency 0.0015}\n                          {:letter \"Y\", :frequency 0.01974}\n                          {:letter \"Z\", :frequency 0.00074}]]\n  (kind/reagent\n   ['(fn [data]\n       (let [size 400\n             x (-&gt; js/d3\n                   .scaleLinear\n                   (.range (into-array [0 size]))\n                   (.domain (into-array [0 (apply max (map :frequency data))])))\n             y (-&gt; js/d3\n                   .scaleBand\n                   (.domain (into-array (map :letter data)))\n                   (.range (into-array [0 size])))\n             color (.scaleOrdinal js/d3 (.-schemeCategory10 js/d3))]\n         [:svg\n          {:viewBox (str \"0 0 \" size \" \" size)}\n          (map\n           (fn\n             [{:keys [letter frequency]}]\n             [:g\n              {:key letter, :transform (str \"translate(\" 0 \",\" (y letter) \")\")}\n              [:rect\n               {:x (x 0),\n                :height (.bandwidth y),\n                :fill (color letter),\n                :width (x frequency)}]])\n           data)]))\n    letter-frequencies]\n   {:html/deps [:d3]}))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#ggplotly",
    "href": "clay_book.examples.html#ggplotly",
    "title": "2  Examples",
    "section": "2.23 ggplotly",
    "text": "2.23 ggplotly\n(WIP)\nClay supports rendering plots through the JS client side of ggplotly - an R package offering a Plotly fronted for ggplot2’s grammar of graphics implementation. This package is part of the htmlwidgets ecosystem, and we represent that in the kind’s name.\nThe following is a work-in-progress attempt to generate JSON specs of the kind consumed by ggplotly’s client side.\nThe following spec function was generaged by mimicking R’s ggplotly(ggplot(mtcars, aes(wt, mpg)) + geom_point()). Therefore, some parts are hard-coded and require generalization. Other parts are missing (e.g., specifying colours).\n\n(defn -&gt;ggplotly-spec [{:keys [layers labels]}]\n  (kind/htmlwidgets-ggplotly\n   (let [;; assuming a single layer for now:\n         {:keys [data xmin xmax ymin ymax]} (first layers)\n         ;; an auxiliary function to compute tick values:\n         -&gt;tickvals (fn [l r]\n                      (let [jump (-&gt; (- r l)\n                                     (/ 6)\n                                     math/floor\n                                     int\n                                     (max 1))]\n                        (-&gt; l\n                            math/ceil\n                            (range r jump))))]\n     {:x\n      {:config\n       {:doubleClick \"reset\",\n        :modeBarButtonsToAdd [\"hoverclosest\" \"hovercompare\"],\n        :showSendToCloud false},\n       :layout\n       {:plot_bgcolor \"rgba(235,235,235,1)\",\n        :paper_bgcolor \"rgba(255,255,255,1)\",\n        :legend\n        {:bgcolor \"rgba(255,255,255,1)\",\n         :bordercolor \"transparent\",\n         :borderwidth 1.88976377952756,\n         :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 11.689497716895}},\n        :xaxis (let [tickvals (-&gt;tickvals xmin xmax)\n                     ticktext (mapv str tickvals)\n                     range-len (- xmax xmin)\n                     range-expansion (* 0.1 range-len)\n                     expanded-range [(- xmin range-expansion)\n                                     (+ xmax range-expansion)]]\n                 {:linewidth 0,\n                  :nticks nil,\n                  :linecolor nil,\n                  :ticklen 3.65296803652968,\n                  :tickcolor \"rgba(51,51,51,1)\",\n                  :tickmode \"array\",\n                  :gridcolor \"rgba(255,255,255,1)\",\n                  :automargin true,\n                  :type \"linear\",\n                  :tickvals tickvals\n                  :zeroline false,\n                  :title\n                  {:text (:x labels),\n                   :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187}},\n                  :tickfont {:color \"rgba(77,77,77,1)\", :family \"\", :size 11.689497716895},\n                  :autorange false,\n                  :showticklabels true,\n                  :showline false,\n                  :showgrid true,\n                  :ticktext ticktext\n                  :ticks \"outside\",\n                  :gridwidth 0.66417600664176,\n                  :anchor \"y\",\n                  :domain [0 1],\n                  :hoverformat \".2f\",\n                  :tickangle 0,\n                  :tickwidth 0.66417600664176,\n                  :categoryarray ticktext,\n                  :categoryorder \"array\",\n                  :range expanded-range},)\n        :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187},\n        :showlegend false,\n        :barmode \"relative\",\n        :yaxis (let [tickvals (-&gt;tickvals ymin ymax)\n                     ticktext (mapv str tickvals)\n                     range-len (- ymax ymin)\n                     range-expansion (* 0.1 range-len)\n                     expanded-range [(- ymin range-expansion)\n                                     (+ ymax range-expansion)]]\n                 {:linewidth 0,\n                  :nticks nil,\n                  :linecolor nil,\n                  :ticklen 3.65296803652968,\n                  :tickcolor \"rgba(51,51,51,1)\",\n                  :tickmode \"array\",\n                  :gridcolor \"rgba(255,255,255,1)\",\n                  :automargin true,\n                  :type \"linear\",\n                  :tickvals tickvals,\n                  :zeroline false,\n                  :title\n                  {:text (:y labels),\n                   :font {:color \"rgba(0,0,0,1)\", :family \"\", :size 14.6118721461187}},\n                  :tickfont {:color \"rgba(77,77,77,1)\", :family \"\", :size 11.689497716895},\n                  :autorange false,\n                  :showticklabels true,\n                  :showline false,\n                  :showgrid true,\n                  :ticktext ticktext,\n                  :ticks \"outside\",\n                  :gridwidth 0.66417600664176,\n                  :anchor \"x\",\n                  :domain [0 1],\n                  :hoverformat \".2f\",\n                  :tickangle 0,\n                  :tickwidth 0.66417600664176,\n                  :categoryarray ticktext,\n                  :categoryorder \"array\",\n                  :range expanded-range},)\n        :hovermode \"closest\",\n        :margin\n        {:t 25.7412480974125,\n         :r 7.30593607305936,\n         :b 39.6955859969559,\n         :l 37.2602739726027},\n        :shapes\n        [{:yref \"paper\",\n          :fillcolor nil,\n          :xref \"paper\",\n          :y1 1,\n          :type \"rect\",\n          :line {:color nil, :width 0, :linetype []},\n          :y0 0,\n          :x1 1,\n          :x0 0}]},\n       :highlight\n       {:on \"plotly_click\",\n        :persistent false,\n        :dynamic false,\n        :selectize false,\n        :opacityDim 0.2,\n        :selected {:opacity 1},\n        :debounce 0},\n       :base_url \"https://plot.ly\",\n       :cur_data \"1f2fea5b54d146\",\n       :source \"A\",\n       :shinyEvents\n       [\"plotly_hover\"\n        \"plotly_click\"\n        \"plotly_selected\"\n        \"plotly_relayout\"\n        \"plotly_brushed\"\n        \"plotly_brushing\"\n        \"plotly_clickannotation\"\n        \"plotly_doubleclick\"\n        \"plotly_deselect\"\n        \"plotly_afterplot\"\n        \"plotly_sunburstclick\"],\n       :attrs {:1f2fea5b54d146 {:x {}, :y {}, :type \"scatter\"}},\n       :data\n       [{:y (:y data)\n         :hoveron \"points\",\n         :frame nil,\n         :hoverinfo \"text\",\n         :marker\n         {:autocolorscale false,\n          :color \"rgba(0,0,0,1)\",\n          :opacity 1,\n          :size 5.66929133858268,\n          :symbol \"circle\",\n          :line {:width 1.88976377952756, :color \"rgba(0,0,0,1)\"}},\n         :mode \"markers\"\n         :type \"scatter\",\n         :xaxis \"x\",\n         :showlegend false,\n         :yaxis \"y\",\n         :x (:x data)\n         :text (-&gt; data\n                   (tc/select-columns [:x :y])\n                   (tc/rows :as-maps)\n                   (-&gt;&gt; (mapv pr-str)))}]},\n      :evals [],\n      :jsHooks []})))\n\n\n(require '[tech.v3.datatype.functional :as fun])\n\nA random walk example:\n\n(let [n 100\n      xs (range n)\n      ys (reductions + (repeatedly n #(- (rand) 0.5)))\n      xmin (fun/reduce-min xs)\n      xmax (fun/reduce-max xs)\n      ymin (fun/reduce-min ys)\n      ymax (fun/reduce-max ys)\n      data (tc/dataset {:x xs\n                        :y ys})]\n  (-&gt;ggplotly-spec\n   {:layers [{:data data\n              :xmin xmin :xmax xmax\n              :ymin ymin :ymax ymax}]\n    :labels {:x \"wt\"\n             :y \"mpg\"}}))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#dmol.js",
    "href": "clay_book.examples.html#dmol.js",
    "title": "2  Examples",
    "section": "2.24 3DMol.js",
    "text": "2.24 3DMol.js\nEmbedding a 3Dmol Viewer (original example):\n\n(kind/reagent\n ['(fn [{:keys [data-pdb]}]\n     [:div {:style {:height \"400px\"\n                    :width \"400px\"\n                    :position :relative}\n            :class \"viewer_3Dmoljs\"\n            :data-pdb data-pdb\n            :data-backgroundcolor \"0xffffff\"\n            :data-style \"stick\"\n            :data-ui true}])\n  {:data-pdb \"2POR\"}]\n ;; Note we need to mention the dependency:\n {:html/deps [:three-d-mol]})\n\n\nUsing 3Dmol within your code (inspired by these examples):\n\n(defonce pdb-2POR\n  (slurp \"https://files.rcsb.org/download/2POR.pdb\"))\n\n\n(kind/reagent\n ['(fn [{:keys [pdb-data]}]\n     [:div\n      {:style {:width \"100%\"\n               :height \"500px\"\n               :position \"relative\"}\n       :ref (fn [el]\n              (let [config (clj-&gt;js\n                            {:backgroundColor \"0xffffff\"})\n                    viewer (.createViewer js/$3Dmol el)]\n                (.setViewStyle viewer (clj-&gt;js\n                                       {:style \"outline\"}))\n                (.addModelsAsFrames viewer pdb-data \"pdb\")\n                (.addSphere viewer (clj-&gt;js\n                                    {:center {:x 0\n                                              :y 0\n                                              :z 0}\n                                     :radius 5\n                                     :color \"green\"\n                                     :alpha 0.2}))\n                (.zoomTo viewer)\n                (.render viewer)\n                (.zoom viewer 0.8 2000)))}])\n  {:pdb-data pdb-2POR}]\n ;; Note we need to mention the dependency:\n {:html/deps [:three-d-mol]})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#video",
    "href": "clay_book.examples.html#video",
    "title": "2  Examples",
    "section": "2.25 Video",
    "text": "2.25 Video\nVideos can be specified as urls (possibly to local files):\n\n(kind/video {:src \"https://www.sample-videos.com/video321/mp4/240/big_buck_bunny_240p_30mb.mp4\"})\n\n\nVideos can also be specified as youtube videos: See, e.g., HTML Youtube Videos on w3schools.\n\n(kind/video {:youtube-id \"DAQnvAgBma8\"})\n\n\n\n(kind/video {:youtube-id \"DAQnvAgBma8\"\n             :allowfullscreen false})\n\n\n\n(kind/video {:youtube-id \"DAQnvAgBma8\"\n             :iframe-width 480\n             :iframe-height 270})\n\n\n\n(kind/video {:youtube-id \"DAQnvAgBma8\"\n             :embed-options {:mute 1\n                             :controls 0}})",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#embedded-portal",
    "href": "clay_book.examples.html#embedded-portal",
    "title": "2  Examples",
    "section": "2.26 Embedded Portal",
    "text": "2.26 Embedded Portal\nWe may embed Portal’s data-navigating viewers using kind/portal.\n\n(kind/portal {:x (range 3)})\n\n\nNote that kind/portal applies the kind-portal adapter to nested kinds.\n\n(kind/portal\n [(kind/hiccup [:img {:height 50 :width 50\n                      :src \"https://clojure.org/images/clojure-logo-120b.png\"}])\n  (kind/hiccup [:img {:height 50 :width 50\n                      :src \"https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg\"}])])\n\n\n\n(kind/portal\n [(kind/hiccup [:big [:big \"a plot\"]])\n  (random-vega-lite-plot 9)])",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#nesting-kinds-in-hiccup",
    "href": "clay_book.examples.html#nesting-kinds-in-hiccup",
    "title": "2  Examples",
    "section": "2.27 Nesting kinds in Hiccup",
    "text": "2.27 Nesting kinds in Hiccup\nKinds are treated recursively inside Hiccup:\n\n(kind/hiccup\n [:div {:style {:background \"#f5f3ff\"\n                :border \"solid\"}}\n\n  [:hr]\n  [:pre [:code \"kind/md\"]]\n  (kind/md \"*some text* **some more text**\")\n\n  [:hr]\n  [:pre [:code \"kind/code\"]]\n  (kind/code \"{:x (1 2 [3 4])}\")\n\n  [:hr]\n  [:pre [:code \"kind/dataset\"]]\n  (tc/dataset {:x (range 33)\n               :y (map inc (range 33))})\n\n  [:hr]\n  [:pre [:code \"kind/table\"]]\n  (kind/table\n   (tc/dataset {:x (range 33)\n                :y (map inc (range 33))}))\n\n  [:hr]\n  [:pre [:code \"kind/vega-lite\"]]\n  (random-vega-lite-plot 9)\n\n  [:hr]\n  [:pre [:code \"kind/vega-lite\"]]\n  (-&gt; {:data {:values \"x,y\n1,1\n2,4\n3,9\n-1,1\n-2,4\n-3,9\"\n              :format {:type :csv}},\n       :mark \"point\"\n       :encoding\n       {:x {:field \"x\", :type \"quantitative\"}\n        :y {:field \"y\", :type \"quantitative\"}}}\n      kind/vega-lite)\n\n  [:hr]\n  [:pre [:code \"kind/reagent\"]]\n  (kind/reagent\n   ['(fn [numbers]\n       [:p {:style {:background \"#d4ebe9\"}}\n        (pr-str (map inc numbers))])\n    (vec (range 40))])])\n\nkind/mdsome text some more textkind/code{:x (1 2 [3 4])}kind/dataset_unnamed [33 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n4\n5\n\n\n5\n6\n\n\n6\n7\n\n\n7\n8\n\n\n8\n9\n\n\n9\n10\n\n\n...\n...\n\n\n22\n23\n\n\n23\n24\n\n\n24\n25\n\n\n25\n26\n\n\n26\n27\n\n\n27\n28\n\n\n28\n29\n\n\n29\n30\n\n\n30\n31\n\n\n31\n32\n\n\n32\n33\n\n\n\nkind/table\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n4\n5\n\n\n5\n6\n\n\n6\n7\n\n\n7\n8\n\n\n8\n9\n\n\n9\n10\n\n\n10\n11\n\n\n11\n12\n\n\n12\n13\n\n\n13\n14\n\n\n14\n15\n\n\n15\n16\n\n\n16\n17\n\n\n17\n18\n\n\n18\n19\n\n\n19\n20\n\n\n20\n21\n\n\n21\n22\n\n\n22\n23\n\n\n23\n24\n\n\n24\n25\n\n\n25\n26\n\n\n26\n27\n\n\n27\n28\n\n\n28\n29\n\n\n29\n30\n\n\n30\n31\n\n\n31\n32\n\n\n32\n33\n\n\n\n\nkind/vega-litekind/vega-litekind/reagent\nScittle and Reagent kinds are recognized automatically inside Hiccup:\n\n(kind/hiccup\n [:div\n  ;; recognized as `kind/scittle`\n  '(defn g [x]\n     (+ x 9))\n  ;; recognized as `kind/reagent`\n  ['(fn []\n      [:p (g 11)])]])",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#nesting-kinds-in-tables",
    "href": "clay_book.examples.html#nesting-kinds-in-tables",
    "title": "2  Examples",
    "section": "2.28 Nesting kinds in Tables",
    "text": "2.28 Nesting kinds in Tables\nKinds are treated recursively inside Tables:\n\n(kind/table\n {:column-names [(kind/hiccup\n                  [:div {:style {:background-color \"#ccaabb\"}} [:big \":x\"]])\n                 (kind/hiccup\n                  [:div {:style {:background-color \"#aabbcc\"}} [:big \":y\"]])]\n  :row-vectors [[(kind/md \"*some text* **some more text**\")\n                 (kind/code \"{:x (1 2 [3 4])}\")]\n                [(tc/dataset {:x (range 3)\n                              :y (map inc (range 3))})\n                 (random-vega-lite-plot 9)]\n                [(kind/hiccup [:div.clay-limit-image-width\n                               clay-image])\n                 (kind/md \"$x^2$\")]]})\n\n\n\n\n\n\n\n\n\n\n\n:x\n\n\n:y\n\n\n\n\n\nsome text some more text\n\n{:x (1 2 [3 4])}\n\n\n\n_unnamed [3 2]:\n:x:y\n01\n12\n23\n\n\n\n\n\n\n\n\n\\(x^2\\)\n\n\n\n\n\n\n(kind/table\n {:column-names [\"size\" \"square\"]\n  :row-vectors (for [i (range 20)]\n                 (let [size (* i 10)\n                       px (str size \"px\")]\n                   [size\n                    (kind/hiccup\n                     [:div {:style {:height px\n                                    :width px\n                                    :background-color \"purple\"}}])]))}\n {:use-datatables true})\n\n\n\nsizesquare0102030405060708090100110120130140150160170180190",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#more-nesting-examples",
    "href": "clay_book.examples.html#more-nesting-examples",
    "title": "2  Examples",
    "section": "2.29 More nesting examples",
    "text": "2.29 More nesting examples\n\n{:plot (random-vega-lite-plot 9)\n :dataset (tc/dataset {:x (range 3)\n                       :y (repeatedly 3 rand)})\n :arithmetic (kind/fn [+ 1 2])}\n\n{\n\n\n\n\n\n\n\n\n:plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:dataset\n\n\n\n_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.43753830\n\n\n1\n0.27972701\n\n\n2\n0.54929821\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:arithmetic\n\n\n\n3\n\n\n\n\n\n}\n\n[(random-vega-lite-plot 9)\n (tc/dataset {:x (range 3)\n              :y (repeatedly 3 rand)})\n (kind/fragment [(+ 1 2)\n                 (+ 3 4)])\n (-&gt; (toydata/iris-ds)\n     (hanami/plot hanami/rule-chart\n                  {:=x :sepal-width\n                   :=x2 :sepal-length\n                   :=y :petal-width\n                   :=y2 :petal-length\n                   :=color :species\n                   :=color-type :nominal\n                   :=mark-size 3\n                   :=mark-opacity 0.2}))]\n\n[_unnamed [3 2]:\n\n\n\n:x\n:y\n\n\n\n\n0\n0.40961379\n\n\n1\n0.38972682\n\n\n2\n0.68599698\n\n\n\n3\n7\n]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#emmy-viewers",
    "href": "clay_book.examples.html#emmy-viewers",
    "title": "2  Examples",
    "section": "2.30 emmy-viewers",
    "text": "2.30 emmy-viewers\nThe support for Emmy-viewers is documented at the 📖 Emmy-viewers chapter📖 of this book (temporarily removed).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.examples.html#blockly",
    "href": "clay_book.examples.html#blockly",
    "title": "2  Examples",
    "section": "2.31 Blockly",
    "text": "2.31 Blockly\nHere is an example of how one may embed Blockly in a page.\n\n(kind/hiccup\n [:div\n  [:script {:src \"https://kloimhardt.github.io/twotiles/twotiles_core.js\"}]\n  [:script \"var parse = scittle.core.eval_string(twotiles.parse_clj);\"]\n  [:script {:src \"https://unpkg.com/blockly/blockly_compressed.js\"}]\n  [:script \"Blockly.defineBlocksWithJsonArray(twotiles.blocks);\"]])\n\n\n\n(def code '(-&gt;&gt; (+ x 4) (for [x [1 2 3]])))\n\n\n(kind/hiccup\n  [:div\n   [:script (str \"var xml1 = parse('\" code \"')\")]\n   [:div {:id \"blocklyDiv1\", :style {:height \"100px\"}}]\n   [:script \"var workspace1 = Blockly.inject('blocklyDiv1',\n{'toolbox': twotiles.toolbox, 'sounds': false})\"]\n   [:script \"const xmlDom1 = Blockly.utils.xml.textToDom(xml1)\"]\n   [:script \"Blockly.Xml.clearWorkspaceAndLoadFromXml(xmlDom1,workspace1)\"]])\n\n\n\nsource: notebooks/clay_book/examples.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "clay_book.test_generation.html",
    "href": "clay_book.test_generation.html",
    "title": "3  Test generation",
    "section": "",
    "text": "3.1 The idea\n(experimental 🛠)\nUsing Kindly annotations, Clay can automatically generate tests out of notebooks.\nThis allows one to make sure that a piece of documentation or tutorial remains correct after code changes, etc. This can also be seen as a literate way to create tests for a library.\nSometimes, we have some expectations regargings the forms we have in our notebook. For example, we know that (rand) should result in a number between zero and one, and we know that (filter pos? (range -4 4)) should result in a nonempty sequence.\nWe can express such expectations by adding Kindly-annotated forms following the forms of interest. Then, every time the notebook is rendered, Clay will generate tests to verify our assumptions. The tests will be collected in a regular clojure.test namespace with standard deftest forms as one may expect.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Test generation</span>"
    ]
  },
  {
    "objectID": "clay_book.test_generation.html#expressing-a-test",
    "href": "clay_book.test_generation.html#expressing-a-test",
    "title": "3  Test generation",
    "section": "3.2 Expressing a test",
    "text": "3.2 Expressing a test\nAssume we have a couple of expressions in our notebook:\n\n(def x 11)\n\n\n(* x x)\n\n\n121\n\nIf we think about it, we know the resulting number has to be more than 100. Thus, we may add a test for that by taking the result of the last form, infoking the &gt; function with the additional argument 100, and making sure the result is truthy.\nThis can be expressed in any one of a few equivalent ways:\n\n(kind/test-last [&gt; 100])\n^kind/test-last [&gt; 100]\n(kindly/check &gt; 100)\n\nIn the rendered namespace, such forms will be hidden. However, as a side effect of rendering, we will get a test namespace with something like the following:\n(def v1_l4 (def x 11))\n(def v3_l8 (* x x))\n(deftest t4_l10 (is (&gt; v3_l8 100)))\nHere, the forms of the notebook are added as def forms, except fot the test itself which is added as a deftest.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Test generation</span>"
    ]
  },
  {
    "objectID": "clay_book.test_generation.html#the-different-test-modes",
    "href": "clay_book.test_generation.html#the-different-test-modes",
    "title": "3  Test generation",
    "section": "3.3 The different test modes",
    "text": "3.3 The different test modes\nClay currently supports two modes for test generation: :sequential (which is the default) and :simple.\nThe idea of :sequential test generation is that, in general, the original notebook may evolve a certain state sequentially. E.g., it may define some vars and mutate some atoms. In general, the correctness of the tests may rely on this state, so the test namespace has to go through all forms of the original notebook one by one, and interlace the deftest forms between them.\nThe idea of :simple test generation is that sometimes, the situation is simpler. The tests can be standalone invocations of certain library functions, so their correctness wuold not rely on anything else in the namespace. This allows us to write tests which are more readable. If all tests are simple, it makes the whole test namespace much simpler.\nThe testing mode can be specified in the :kind/options of the project-level configuration or the namespace level configuration. It can also be specified for a specific test. We’ll see that in the examples below.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Test generation</span>"
    ]
  },
  {
    "objectID": "clay_book.test_generation.html#examples",
    "href": "clay_book.test_generation.html#examples",
    "title": "3  Test generation",
    "section": "3.4 Examples",
    "text": "3.4 Examples\n\n3.4.1 Sequential tests\nHere is a namespace with a few sequential tests, that depend on the state evolving throughout the notebook.\n\n\nsequential.clj\n\n(ns test-gen.sequential\n  (:require [scicloj.kindly.v4.kind :as kind]\n            [scicloj.kindly.v4.api :as kindly]))\n\n(def x 9)\n\n(def *a (atom 0))\n\n(+ x (swap! *a inc))\n\n;; Express a test by the\n;; `kind/test-last` function:\n\n(kind/test-last [= 10])\n\n(+ x (swap! *a inc))\n\n;; Express a test by the \n;; `^kind/test-last` metadata:\n\n^kind/test-last [= 11]\n\n(+ x (swap! *a inc))\n\n;; Express a test by the \n;; `kindky/check` macro:\n\n(kindly/check = 12)\n\n\n\nsequential_generated_test.clj\n\n(ns\n test-gen.sequential-generated-test\n (:require\n  [scicloj.kindly.v4.kind :as kind]\n  [scicloj.kindly.v4.api :as kindly]\n  [clojure.test :refer [deftest is]]))\n\n\n(def v1_l5 (def x 9))\n\n\n(def v2_l7 (def *a (atom 0)))\n\n\n(def v3_l9 (+ x (swap! *a inc)))\n\n\n(deftest t5_l14 (is (= v3_l9 10)))\n\n\n(def v6_l16 (+ x (swap! *a inc)))\n\n\n(deftest t8_l21 (is (= v6_l16 11)))\n\n\n(def v9_l23 (+ x (swap! *a inc)))\n\n\n(deftest t11_l28 (is (= v9_l23 12)))\n\n\n\n\n\n3.4.2 Mixed sequential and simple tests\nHere is a namespace that involves both sequential and simple tests. This is expressed through :test-mode :simple in the kindly options part of the call to kind/test-last.\n\n\nsequential_and_simple.clj\n\n(ns test-gen.sequential-and-simple\n  (:require [scicloj.kindly.v4.kind :as kind]))\n\n(def x 9)\n\n;; A sequential test:\n\n(+ x 11)\n\n(kind/test-last [= 20])\n\n;; A simple test:\n\n(+ 4 5)\n\n(kind/test-last\n [= 9]\n {:test-mode :simple})\n\n\n\nsequential_and_simple_generated_test.clj\n\n(ns\n test-gen.sequential-and-simple-generated-test\n (:require\n  [scicloj.kindly.v4.kind :as kind]\n  [clojure.test :refer [deftest is]]))\n\n\n(def v1_l4 (def x 9))\n\n\n(def v3_l8 (+ x 11))\n\n\n(deftest t4_l10 (is (= v3_l8 20)))\n\n\n(def v6_l14 (+ 4 5))\n\n\n(deftest t7_l16 (is (= (+ 4 5) 9)))\n\n\n\n\n\n3.4.3 Only simple tests\nHere is a namespace where all tests are simple. This can be expressed through :test-mode :simple, which can be specified either in the namespace-level :kindly/options (as we do here), or in each and every kind/test-last call.\n\n\nsimple.clj\n\n^{:kindly/options {:test-mode :simple}}\n(ns test-gen.simple\n  (:require [scicloj.kindly.v4.kind :as kind]))\n\n;; A simple test:\n\n(+ 4 5)\n\n(kind/test-last\n [= 9])\n\n\n\nsimple_generated_test.clj\n\n(ns\n test-gen.simple-generated-test\n (:require\n  [scicloj.kindly.v4.kind :as kind]\n  [clojure.test :refer [deftest is]]))\n\n\n(deftest t3_l9 (is (= (+ 4 5) 9)))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Test generation</span>"
    ]
  },
  {
    "objectID": "clay_book.test_generation.html#more-examples",
    "href": "clay_book.test_generation.html#more-examples",
    "title": "3  Test generation",
    "section": "3.5 More examples",
    "text": "3.5 More examples\nFor a detailed example using this mechanism, see the source of the ClojisR tutorial.\n\nsource: notebooks/clay_book/test_generation.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Test generation</span>"
    ]
  }
]